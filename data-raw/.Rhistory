dplyr::select(-FirstFrac, -SecondFrac, -ThirdFrac) %>%
gather("type","val",-testset_pathway, -nTestSets) %>%
mutate(val_percent = if_else( nTestSets>0, 100*val / nTestSets,0) ) %>%
mutate(testset_pathway = paste(testset_pathway, " (",nTestSets,")",sep=""))
df_benchmark_frac$testset_pathway = ordered(df_benchmark_frac$testset_pathway, levels=unique(df_benchmark_frac$testset_pathway[order(df_benchmark_frac$testset_pathway, decreasing = T)]))
if(version=="fullsize") {
fontsize_base = 10
fontsize_geomtext = 3
} else {
fontsize_base = 7
fontsize_geomtext = 2.5
}
gg = ggplot(df_benchmark_frac,
aes(y=testset_pathway, x=type, fill=val_percent, label=val)) +
theme(axis.text = element_text(size=fontsize_base),
axis.text.x = element_text(angle=-90, hjust=0, vjust=0.5),
axis.title.y = element_blank(),
axis.title.x = element_text(size=fontsize_base+2),
axis.line = element_blank(),
legend.title = element_text(size=fontsize_base+2),
axis.ticks = element_blank())+
geom_tile(colour="white",size=0.25, show.legend=FALSE)+
geom_text(size=fontsize_geomtext)+
scale_fill_continuous("Rank (%)", low="white", high="#c0392b",
guide="colorbar",na.value="white")+
xlab("SPEED2 rank")
ggsave(gg, filename = filename, width = 2.5, height=2.5)
return(gg)
}
# Bates PDF (from exact formula)
batesPDFformula = function(xs,n, a=Ua, b=Ub) {
if(n<1)
return(NA)
# approximate Bates distribution with normal distribution for n>BATES_NORMAL_LIMIT
BATES_NORMAL_LIMIT = 70
formula = function(x,n) {
if(x<0 | x>1) {
return(0)
} else {
if(n<BATES_NORMAL_LIMIT) {
# https://en.wikipedia.org/wiki/Bates_distribution
return(n/2*Reduce('+',lapply(0:n, function(k) (-1)^k*choose(n,k)/factorial(n-1)*(n*x-k)^(n-1)*sign(n*x-k) )))
#return( div.bigq(n/2.0,factorialZ(n-1))*Reduce(add.bigz,lapply(0:n, function(k) (-1)^k*chooseZ(n,k)*pow.bigz(n*x-k,n-1)*sign(n*x-k) )) )
#return( n/2.0/factorial(n-1)*Reduce(add.bigz,lapply(0:n, function(k) (-1)^k*chooseZ(n,k)*pow.bigz(n*x-k,n-1)*pow.bigz(n*x-k,n-1)*sign(n*x-k)  ) ) )
#ret = n/2.0/factorial(n-1)*Reduce('+',lapply(0:n, function(k) (-1)^k*chooseZ(n,k)*(mpfr(n,200)*x-k)^(n-1)*sign(n*x-k) ))
#ret = as.double(ret)
#return(ret)
} else {
# normal approximation
return(dnorm(x, 0.5, 1/sqrt(12*n))) # sd: 1/sqrt(12*n)
}
}
}
return(sapply(1:length(xs), function(i) formula((xs[i]-a)/(b-a), n)))
}
pathwayOverlapRank(speed2_signatures, speed2_signatures, save_heatmap = T, heatmap_filename=paste(PLOT_DIR,"pathway_cluster_rankcor.pdf", sep=""))
df_florianMapk = read_tsv(file="Uhlitz2017_Table_EV1.tsv")
florianMapk = df_florianMapk$entrez_id
florianMapk = df_florianMapk$entrez_id
df_stattest_florianMapk = speed2run(florianMapk)
gg_uhlitz = speed2plot(df_stattest_florianMapk[[1]], df_stattest_florianMapk[[2]], save_plot=T, plot_filename=paste(PLOT_DIR,"speed2_florianMapk.pdf",sep=""), plot_title="", version="panel")
library(magick)
gg_overlap = ggdraw()+
draw_image(magick::image_read_pdf(paste("plots/pathway_cluster_rankcor.pdf", sep=""), density = 600))
row1 = plot_grid(gg_stats, gg_overlap, ncol=2, rel_widths = c(0.4,0.6), labels=c("a", "b"))
row2 = plot_grid(gg_benchmark, gg_batesIllustration, ncol=2, rel_widths=c(0.45, 0.55), labels=c("c", "d"), vjust=c(0.9,1.2))
panel = plot_grid(row1, row2, gg_uhlitz, ncol=1, rel_heights = c(1, 0.6, 1.5), labels=c("", "", "e")  )
save_plot(filename="plots/panel.pdf", panel, base_height=7.9, base_width=3.5)
options(stringsAsFactors=FALSE)
library(RSQLite)
library(DBI)
library(tidyverse)
library(cowplot)
#library(ADGofTest)
library(pheatmap)
library(scales)
library(DT)
library(fgsea)
library(httr)
library(matrixStats)
library(speed2)
source('figure_utils.R')
options(stringsAsFactors=FALSE)
library(RSQLite)
library(DBI)
library(tidyverse)
library(cowplot)
#library(ADGofTest)
library(pheatmap)
library(scales)
library(DT)
library(fgsea)
library(httr)
library(matrixStats)
library(speed2)
source('figure_utils.R')
speed2_signatures = speed2:::speed2_signatures
BAD_PATHWAYS = speed2:::BAD_PATHWAYS
df_numExpPerPathway = speed2:::df_numExpPerPathway
Ua = speed2:::Ua
Ub = speed2:::Ub
PLOT_SI_DIR = "plots/si/"
speed1_signatures_original = read_tsv(file="speed1_signatures_defaultsettings.txt")
colnames(speed1_signatures_original) = c("p_id", "g_id", "gene")
for(pathway in unique(speed1_signatures_original$p_id)) {
speed1_gene_ids = speed1_signatures_original[speed1_signatures_original$p_id==pathway,]$g_id
gsea = gsea_speed2(speed1_gene_ids, NPERM = 2000)
gsea_speed2_plot(gsea, plot_title=paste("SPEED1:", pathway), save_plot=T, plot_filename=paste(PLOT_SI_DIR,"gsea_speed1_", pathway,".pdf", sep=""))
d = speed2run(speed1_gene_ids )
speed2plot(d[[1]], d[[2]], save_plot=T, plot_title=paste("SPEED1:",pathway), plot_filename=paste(PLOT_SI_DIR,"ztest_speed1_", pathway,".pdf", sep=""))
}
gsea_hallmark = data.frame()
for(pathway in names(hallmark)) {
gsea = gsea_speed2(hallmark[[pathway]], NPERM=2000 )
gsea$geneSet = pathway
gsea_hallmark = rbind(gsea_hallmark, gsea)
}
gsea_hallmark = as_tibble(gsea_hallmark)
gsea_hallmark_spread = gsea_hallmark %>%
dplyr::select(geneSet, universe, NES) %>%
spread(key=universe, value=NES)
gsea_hallmark_spread = data.frame(gsea_hallmark_spread, check.names = F)
rownames(gsea_hallmark_spread) = gsea_hallmark_spread$geneSet
gsea_hallmark_spread$geneSet = NULL
rownames(gsea_hallmark_spread) <- gsub("HALLMARK_","",rownames(gsea_hallmark_spread))
pdf(file=paste(PLOT_SI_DIR,"gsea_broad_hallmark_nes_updown_removebad.pdf", sep=""))
#breaks <- c(seq(0,1,length.out=200))
#color <- c(colorRampPalette(c("white","red"))(150), colorRampPalette(c("red","red"))( 49 )) # log
breaks <- c(seq(-10,0,length.out=100), seq(0.01,10,length.out=100))
color <- c(colorRampPalette(c("blue","white"))(100), colorRampPalette(c("white","red"))( 99 )) # log
pheatmap(gsea_hallmark_spread[,!(colnames(gsea_hallmark_spread) %in% BAD_PATHWAYS)], color=color, breaks=breaks, fontsize_row=6, fontsize_col=8)
dev.off()
pdf(file=paste(PLOT_SI_DIR,"gsea_broad_hallmark_nes_abs.pdf", sep=""))
#breaks <- c(seq(0,1,length.out=200))
#color <- c(colorRampPalette(c("white","red"))(150), colorRampPalette(c("red","red"))( 49 )) # log
breaks <- c(seq(0.01,10,length.out=100))
color <- c(colorRampPalette(c("white","red"))( 99 )) # log
pheatmap(abs(gsea_hallmark_spread), color=color, breaks=breaks, fontsize_row=6, fontsize_col=8)
dev.off()
stattest_speed2_hallmark = data.frame()
stattest_speed2_hallmark_control = data.frame()
for(pathway in names(hallmark)) {
d = speed2run(hallmark[[pathway]] )
d_control = speed2run(hallmark[[pathway]], shuffle=T )
d$df_stattest$geneSet = pathway
d_control$df_stattest$geneSet = pathway
stattest_speed2_hallmark = rbind(stattest_speed2_hallmark, d$df_stattest)
stattest_speed2_hallmark_control = rbind(stattest_speed2_hallmark_control, d_control$df_stattest)
}
stattest_speed2_hallmark = as_tibble(stattest_speed2_hallmark)
stattest_speed2_hallmark_control = as_tibble(stattest_speed2_hallmark_control)
gg_ztest_pvals_control = ggplot(stattest_speed2_hallmark_control, aes(x=p_ztest)) +
geom_histogram(aes(y=..density..), binwidth=0.03)
ggsave(filename = paste(PLOT_SI_DIR,"ztest_speed2VsBroad_pvals_control.pdf",sep=""), gg_ztest_pvals_control)
gg_chi2test_pvals_control = ggplot(stattest_speed2_hallmark_control, aes(x=p_chi2test)) +
geom_histogram(aes(y=..density..), binwidth=0.03)+
coord_cartesian(ylim=c(0,2))
ggsave(filename = paste(PLOT_SI_DIR,"chi2test_speed2VsBroad_pvals_control.pdf",sep=""), gg_chi2test_pvals_control)
p_ztest_minpos = min(stattest_speed2_hallmark$p_ztest[stattest_speed2_hallmark$p_ztest>0])
stattest_speed2_hallmark$p_ztest[stattest_speed2_hallmark$p_ztest==0] = p_ztest_minpos
p_chi2test_minpos = min(stattest_speed2_hallmark$p_chi2test[stattest_speed2_hallmark$p_chi2test>0])
stattest_speed2_hallmark$p_chi2test[stattest_speed2_hallmark$p_chi2test==0] = p_chi2test_minpos
ztest_hallmark_spread = stattest_speed2_hallmark
ztest_hallmark_spread$p_ztest =  -log10(ztest_hallmark_spread$p_ztest)
ztest_hallmark_spread$p_ztest[ztest_hallmark_spread$ztest_reg=="DOWN"] = -ztest_hallmark_spread$p_ztest[ztest_hallmark_spread$ztest_reg=="DOWN"]
ztest_hallmark_spread = ztest_hallmark_spread %>%
dplyr::select(speed2, geneSet, p_ztest) %>%
spread(key=speed2, value=p_ztest)
ztest_hallmark_spread = data.frame(ztest_hallmark_spread, check.names = F)
rownames(ztest_hallmark_spread) = ztest_hallmark_spread$geneSet
ztest_hallmark_spread$geneSet = NULL
rownames(ztest_hallmark_spread) <- gsub("HALLMARK_","",rownames(ztest_hallmark_spread))
pdf(file=paste(PLOT_SI_DIR,"ztest_broad_hallmark.pdf",sep=""))
#breaks <- c(seq(0,1,length.out=200))
#color <- c(colorRampPalette(c("white","red"))(150), colorRampPalette(c("red","red"))( 49 )) # log
breaks <- c(seq(-60,140,length.out=200))
color <- c(colorRampPalette(c("blue","white"))( 60 ), colorRampPalette(c("white","red"))( 139 )) # log
pheatmap(ztest_hallmark_spread, color=color, breaks=breaks, fontsize_row=6, fontsize_col=8)
dev.off()
pdf(file=paste(PLOT_DIR,"ztest_broad_hallmark_row_scaled_only_p0001.pdf",sep=""))
maxP = rowMaxs(as.matrix(abs(ztest_hallmark_spread)))
ztest_hallmark_spread_filt = ztest_hallmark_spread[maxP>-log10(0.001),]
pheatmap(ztest_hallmark_spread_filt,fontsize_row=6, fontsize_col=8,scale = "row")
dev.off()
chi2test_hallmark_spread = stattest_speed2_hallmark %>%
dplyr::select(geneSet, speed2, p_chi2test) %>%
mutate(p_chi2test = -log10(p_chi2test)) %>%
spread(key=speed2, value=p_chi2test)
chi2test_hallmark_spread = data.frame(chi2test_hallmark_spread, check.names = F)
rownames(chi2test_hallmark_spread) = chi2test_hallmark_spread$geneSet
chi2test_hallmark_spread$geneSet = NULL
rownames(chi2test_hallmark_spread) <- gsub("HALLMARK_","",rownames(chi2test_hallmark_spread))
pdf(file=paste(PLOT_SI_DIR,"chi2test_broad_hallmark.pdf",sep=""))
#breaks <- c(seq(0,1,length.out=200))
#color <- c(colorRampPalette(c("white","red"))(150), colorRampPalette(c("red","red"))( 49 )) # log
breaks <- c(seq(0,20,length.out=100))
color <- c(colorRampPalette(c("white","red"))( 99 )) # log
pheatmap(chi2test_hallmark_spread, color=color, breaks=breaks, fontsize_row=6, fontsize_col=8)
dev.off()
df_maxprobe_signed_wNexpPath = left_join(speed2_signatures %>% filter(!(p_id %in% BAD_PATHWAYS)), df_numExpPerPathway %>% filter(!(p_id %in% BAD_PATHWAYS)) %>%
dplyr::select(p_id, nexp_pathway) %>%
distinct)
gg = ggplot(df_maxprobe_signed_wNexpPath, aes(x=-log10(qval), y=-log10(P.BH), color=nexp_pathway)) +
geom_point()+
coord_cartesian(ylim=c(0,4), xlim=c(0,4))
ggsave(gg, filename = paste(PLOT_SI_DIR,"bh_vs_qval_colorNexp.png",sep=""))
gg = ggplot(speed2_signatures  %>% filter(!(p_id %in% BAD_PATHWAYS)), aes(x=-log10(qval), y=-log10(P.BH), color=p_id)) +
geom_point()+
coord_cartesian(ylim=c(0,4), xlim=c(0,4))+
theme(legend.title=element_blank())
ggsave(gg, filename = paste(PLOT_SI_DIR,"bh_vs_qval_colorPid.png",sep=""))
dist_hallmark_hallmark = matrix(NA,nrow=length(HALLMARK_SUBSET), ncol=length(HALLMARK_SUBSET))
colnames(dist_hallmark_hallmark) = HALLMARK_SUBSET
rownames(dist_hallmark_hallmark) = HALLMARK_SUBSET
for(hallmark_i1 in 1:(length(HALLMARK_SUBSET)-1)) {
hallmark1 = HALLMARK_SUBSET[hallmark_i1]
for(hallmark_i2 in (hallmark_i1+1):length(HALLMARK_SUBSET)) {
hallmark2 = HALLMARK_SUBSET[hallmark_i2]
dist_hallmark_hallmark[hallmark_i1,hallmark_i2] = doFisherTest(hallmark[[hallmark1]], hallmark[[hallmark2]])
dist_hallmark_hallmark[hallmark_i2,hallmark_i1] = dist_hallmark_hallmark[hallmark_i1,hallmark_i2]
}
}
N_ALL_GENES = length(unique(speed2_signatures$g_id))
dist_hallmark_hallmark = matrix(NA,nrow=length(HALLMARK_SUBSET), ncol=length(HALLMARK_SUBSET))
colnames(dist_hallmark_hallmark) = HALLMARK_SUBSET
rownames(dist_hallmark_hallmark) = HALLMARK_SUBSET
for(hallmark_i1 in 1:(length(HALLMARK_SUBSET)-1)) {
hallmark1 = HALLMARK_SUBSET[hallmark_i1]
for(hallmark_i2 in (hallmark_i1+1):length(HALLMARK_SUBSET)) {
hallmark2 = HALLMARK_SUBSET[hallmark_i2]
dist_hallmark_hallmark[hallmark_i1,hallmark_i2] = doFisherTest(hallmark[[hallmark1]], hallmark[[hallmark2]])
dist_hallmark_hallmark[hallmark_i2,hallmark_i1] = dist_hallmark_hallmark[hallmark_i1,hallmark_i2]
}
}
pdf(file=paste(PLOT_SI_DIR,"benchmark_hallmark_fisher.pdf",sep=""), width=11, height=9)
breaks <- c(seq(0,40,length.out=100), seq(41,140,length.out=2))
color <- c(colorRampPalette(c("white","red"))(100), colorRampPalette(c("red","red"))( 1 )) # log
pheatmap(-log10(dist_hallmark_hallmark), fontsize = 11, color=color, breaks=breaks)
dev.off()
options(stringsAsFactors=FALSE)
library(tidyverse)
library(rjson)
MINCOUNT = 2
LoadToEnvironment <- function(RData, env = new.env()){
load(RData, env)
return(env)
}
signZvalue = function(zscore, effect) {
if(effect %in% c("activating", "activation")) {
return(zscore)
} else if(effect %in% c("inhibiting", "inhibition", "inhibting")) {
return(-zscore)
}
return(NA)
}
signZvalue_vec = function(zscore, effect) {
return(sapply(1:length(zscore), function(ix)  signZvalue(zscore[ix], effect[ix])))
}
regFromZscores = function(zscores) {
if(length(which(zscores>0)) > length(which(zscores<0)))
return("UP")
else
return("DOWN")
}
bates_pipe = . %>%
group_by(p_id, gene, g_id) %>%
summarise(zrank_signed_mean=mean(zrank_signed),
regulation=regFromZscores(zvalue_signed),
nexp=n()) %>%
filter(nexp>=MINCOUNT) %>%
mutate(P.bates=bates2sidedPval_vec(zrank_signed_mean,nexp, a=Ua, b=Ub)) %>%
arrange(p_id, P.bates)
formatDataFrameForWeb = function(df) {
df_web = df
df_web$P.bates = signif(df_web$P.bates, digits=2)
df_web$qval = signif(df_web$qval, digits=2)
df_web$zrank_signed_mean = signif(df_web$zrank_signed_mean, digits=2)
df_web$gene[is.na(df_web$gene)] = '*unnamed*'
return(df_web)
}
saveGeneSignatureWebTable = function(df, maxGenesPerPathway=300, filename=file.path(SITE_DIR,"speed2_gene_signatures.json")) {
df_web = formatDataFrameForWeb(df)
df_web = df_web %>%
dplyr::select(p_id, gene, regulation, nexp, zrank_signed_mean, P.bates, qval) %>%
dplyr::rename(Pval=P.bates, Regulation=regulation, Qval=qval, Gene=gene, Nexp=nexp, Pathway=p_id, Zrank=zrank_signed_mean) %>%
filter(Qval<0.05) %>%
group_by(Pathway) %>%
top_n(maxGenesPerPathway, -Pval)
x <- toJSON(unname(split(df_web, 1:nrow(df_web))))
fileConn<-file(filename)
writeLines(x, fileConn)
close(fileConn)
#return(cat(x))
}
speed2:::df_numExpPerPathway
setwd("~/Google Drive/Documents/bluthgen/SPEED2NY/speed2/data-raw")
# /groups/nils/members/mattias/SPEED2/
df_zvalues = read_tsv(file = "speed2_zvalues.tsv.gz")
df_exp = read_tsv(file = "speed2_experiments.tsv") %>%
dplyr::select(e_id,effect)
df_exp
df_zvalues
speed2_signatures = left_join(df_zvalues,df_exp) %>%
head(n=100000) %>%
group_by(p_id,e_id) %>%
filter(expression > median(expression)) %>%
ungroup %>%
filter(effect %in% c("activation", "inhibition")) %>% # filter out unknown effect
group_by(p_id, gene, g_id, e_id, effect) %>%
summarise(zvalue=zvalue[which.max(expression)]) %>%
ungroup %>%
mutate(zvalue_signed = signZvalue_vec(zvalue, effect)) %>%
group_by(p_id, e_id) %>%
mutate(zrank_signed=abs(Ub-Ua)*percent_rank(zvalue_signed)-max(Ua,Ub)) %>%
ungroup
Ua
speed2:::Ua
speed2:::Ub
Ua = -1
Ub = 1
speed2_signatures = left_join(df_zvalues,df_exp) %>%
head(n=100000) %>%
group_by(p_id,e_id) %>%
filter(expression > median(expression)) %>%
ungroup %>%
filter(effect %in% c("activation", "inhibition")) %>% # filter out unknown effect
group_by(p_id, gene, g_id, e_id, effect) %>%
summarise(zvalue=zvalue[which.max(expression)]) %>%
ungroup %>%
mutate(zvalue_signed = signZvalue_vec(zvalue, effect)) %>%
group_by(p_id, e_id) %>%
mutate(zrank_signed=abs(Ub-Ua)*percent_rank(zvalue_signed)-max(Ua,Ub)) %>%
ungroup
speed2_signatures
speed2_signatures = speed2_signatures %>%
filter(!(p_id=="Wnt" & effect=="activation"))
df_numExpPerPathway = speed2_signatures %>%
group_by(p_id, e_id) %>%
count %>%
group_by(p_id) %>%
summarize(nexp_pathway=n())
speed2_signatures %>%
group_by(p_id, e_id) %>%
count
speed2_signatures %>%
group_by(p_id, e_id)
speed2_signatures %>%
group_by(p_id, e_id) %>%
count()
speed2_signatures
options(stringsAsFactors=FALSE)
speed2_signatures %>%
group_by(p_id, e_id) %>%
count
speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count
speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count()
speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count() %>%
group_by(p_id) %>%
summarize(nexp_pathway=n())
speed2_signatures %>%
bates_pipe
library(speed2)
bates_pipe = . %>%
group_by(p_id, gene, g_id) %>%
summarise(zrank_signed_mean=mean(zrank_signed),
regulation=regFromZscores(zvalue_signed),
nexp=n()) %>%
filter(nexp>=MINCOUNT) %>%
mutate(P.bates=speed2:::bates2sidedPval_vec(zrank_signed_mean,nexp, a=Ua, b=Ub)) %>%
arrange(p_id, P.bates)
speed2_signatures %>%
bates_pipe
# Compute q-values function
computeQ = function(p_id, P.bates) {
p_id = unique(p_id)[1]
pvals =  P.bates
# /groups/nils/members/mattias/SPEED2/control/
env = LoadToEnvironment(paste("control/control_",p_id,".RData", sep=""))
pvals_control = env$control$P.bates
pvals_sorted_ix = order(pvals)
pvals_sorted = pvals[pvals_sorted_ix]
pvals_control_sorted = pvals_control[order(pvals_control)]
num_leq_in_control = rep(NA, length(pvals))
control_ix_prev = 1
control_ix_curr = 1
while(pvals_control_sorted[control_ix_curr]<=pvals_sorted[1]) {
control_ix_curr = control_ix_curr + 1
}
num_leq_in_control[1] = control_ix_curr-control_ix_prev
for(pval_i in 2:length(pvals_sorted)) {
pval = pvals_sorted[pval_i]
while((pvals_control_sorted[control_ix_curr]<=pval) & (control_ix_curr<length(pvals_control_sorted))) {
control_ix_curr = control_ix_curr + 1
}
num_leq_in_control[pval_i] = num_leq_in_control[pval_i-1]+(control_ix_curr-control_ix_prev)
control_ix_prev = control_ix_curr
}
len_pvals_control = length(pvals_control_sorted)
len_pvals = length(pvals_sorted)
fdrs = sapply(1:length(pvals_sorted), function(i) (max(num_leq_in_control[i], 1)/len_pvals_control)/(i/len_pvals))
qvals = rep(NA,len_pvals)
qvals[length(qvals)]=fdrs[length(fdrs)]
for(i in (length(qvals)-1):1) {
qvals[i] = min(qvals[i+1], fdrs[i])
}
qvals = qvals[match(1:length(qvals),pvals_sorted_ix)]
return(qvals)
}
speed2_signatures %>%
group_by(p_id) %>%
mutate(qval=computeQ(p_id, P.bates)) %>%
ungroup %>%
mutate(P.bates = abs(P.bates)) %>%
mutate(P.BH = p.adjust(P.bates, method="BH"))
speed2_signatures = speed2_signatures %>%
bates_pipe
speed2_signatures %>%
group_by(p_id) %>%
mutate(qval=computeQ(p_id, P.bates)) %>%
ungroup %>%
mutate(P.bates = abs(P.bates)) %>%
mutate(P.BH = p.adjust(P.bates, method="BH"))
speed2_signatures %>%
filter(qval<0.05) %>%
#filter(P.BH<0.05) %>%
arrange(p_id, P.bates) %>%
group_by(p_id) %>%
summarize(n=n()) %>%
arrange(desc(n))
speed2_signatures
speed2_signatures = speed2_signatures %>%
group_by(p_id) %>%
mutate(qval=computeQ(p_id, P.bates)) %>%
ungroup %>%
mutate(P.bates = abs(P.bates)) %>%
mutate(P.BH = p.adjust(P.bates, method="BH"))
df_numExpPerPathway
df_numExpPerPathway = speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count() %>%
group_by(p_id) %>%
summarize(nexp_pathway=n())
#%>% filter(!(p_id %in% BAD_PATHWAYS))
speed2_signatures = left_join(df_zvalues,df_exp) %>%
#head(n=100000) %>%
group_by(p_id,e_id) %>%
filter(expression > median(expression)) %>%
ungroup %>%
filter(effect %in% c("activation", "inhibition")) %>% # filter out unknown effect
group_by(p_id, gene, g_id, e_id, effect) %>%
summarise(zvalue=zvalue[which.max(expression)]) %>%
ungroup %>%
mutate(zvalue_signed = signZvalue_vec(zvalue, effect)) %>%
group_by(p_id, e_id) %>%
mutate(zrank_signed=abs(Ub-Ua)*percent_rank(zvalue_signed)-max(Ua,Ub)) %>%
ungroup
# filter out Wnt activating experiments (unreliable)
speed2_signatures = speed2_signatures %>%
filter(!(p_id=="Wnt" & effect=="activation"))
df_numExpPerPathway = speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count() %>%
group_by(p_id) %>%
summarize(nexp_pathway=n())
#%>% filter(!(p_id %in% BAD_PATHWAYS))
speed2_signatures = left_join(df_zvalues,df_exp) %>%
head(n=100000) %>%
group_by(p_id,e_id) %>%
filter(expression > median(expression)) %>%
ungroup %>%
filter(effect %in% c("activation", "inhibition")) %>% # filter out unknown effect
group_by(p_id, gene, g_id, e_id, effect) %>%
summarise(zvalue=zvalue[which.max(expression)]) %>%
ungroup %>%
mutate(zvalue_signed = signZvalue_vec(zvalue, effect)) %>%
group_by(p_id, e_id) %>%
mutate(zrank_signed=abs(Ub-Ua)*percent_rank(zvalue_signed)-max(Ua,Ub)) %>%
ungroup
# filter out Wnt activating experiments (unreliable)
speed2_signatures = speed2_signatures %>%
filter(!(p_id=="Wnt" & effect=="activation"))
df_numExpPerPathway = speed2_signatures %>%
group_by(p_id, e_id) %>%
dplyr::count() %>%
group_by(p_id) %>%
summarize(nexp_pathway=n())
#%>% filter(!(p_id %in% BAD_PATHWAYS))
df_numExpPerPathway
speed2_signatures = speed2_signatures %>%
bates_pipe
speed2_signatures = speed2_signatures %>%
group_by(p_id) %>%
mutate(qval=computeQ(p_id, P.bates)) %>%
ungroup %>%
mutate(P.bates = abs(P.bates)) %>%
mutate(P.BH = p.adjust(P.bates, method="BH"))
left_join(speed2_signatures, df_numExpPerPathway)
#save(speed2_signatures_bates_qval, file="speed2_signatures_bates_qval.RData")
speed2_signatures = left_join(speed2_signatures, df_numExpPerPathway)
speed2_signatures %>%
filter(qval<0.05) %>%
#filter(P.BH<0.05) %>%
arrange(p_id, P.bates) %>%
group_by(p_id) %>%
summarize(n=n()) %>%
arrange(desc(n))
